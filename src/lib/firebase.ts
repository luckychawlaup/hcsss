
import { initializeApp, getApps, getApp } from "firebase/app";
import { getDatabase } from "firebase/database";
import { getAuth, signInAnonymously, signInWithCustomToken } from "firebase/auth";

const firebaseConfig = {
  apiKey: "AIzaSyA5BScSQ_PjDjpAfIBHCeo5grpSr2i04eM",
  authDomain: "hilton-convent-school.firebaseapp.com",
  databaseURL: "https://hilton-convent-school-default-rtdb.firebaseio.com",
  projectId: "hilton-convent-school",
  storageBucket: "hilton-convent-school.appspot.com",
  messagingSenderId: "438196355297",
  appId: "1:438196355297:web:7d868f78190eff375977a0"
};


// Initialize Firebase
const app = !getApps().length ? initializeApp(firebaseConfig) : getApp();
const db = getDatabase(app);
const auth = getAuth(app);

const getPrincipalUID = () => {
     if (typeof document === 'undefined') return null;
     const cookies = document.cookie.split(';');
     for (let cookie of cookies) {
        const [name, value] = cookie.trim().split('=');
        if (name === 'principal-uid') return value;
    }
    return null;
}


// Function to sign in the principal securely.
export const signInPrincipal = async () => {
    const principalUID = getPrincipalUID();
    if (auth.currentUser?.uid === principalUID) return; // Already signed in
    try {
        // In a real production app, this token would be generated by a secure backend
        // and sent to the client. Here, we are simulating this for the prototype.
        // The token is JWT-like but this is just a placeholder.
        const customToken = `for-prototype-only-principal-token-for-uid-${principalUID}`;
        
        // This will fail unless a proper custom token is generated via Firebase Admin SDK.
        // For now, we will rely on anonymous sign in and security rules based on the known UID.
        await signInAnonymously(auth);

    } catch (error) {
        console.error("Error signing in principal:", error);
    }
}


export { app, db, auth };
